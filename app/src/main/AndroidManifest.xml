<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.cmpe277.mobileninjas.eventshare">

    <!--
           The ACCESS_COARSE/FINE_LOCATION permissions are not required to use
           Google Maps Android API v2, but you must specify either coarse or fine
           location permissions for the 'MyLocation' functionality.
      -->

    <uses-permission android:name="android.permission.ACCESS_LOCATION_EXTRA_COMMANDS"/>

    <uses-permission android:name="android.permission.READ_PROFILE"/>
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
    <uses-permission android:name="android.permission.WAKE_LOCK"/>
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>

    <!-- Allows applications to connent network (Required) -->
    <uses-permission android:name="android.permission.INTERNET" />

    <!-- Allows applications to access information about networks (Required) -->
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <!-- Allows read only access to phone state. (Required For analytics) -->
    <uses-permission android:name="android.permission.READ_PHONE_STATE" />

    <!-- Allows access to the list of accounts in the Accounts Service.
    (Required For Oauth login and Google login using BuiltUILoginController) -->
    <uses-permission android:name="android.permission.GET_ACCOUNTS" />

    <!-- Allows an application to request authtokens from the AccountManager.
    (Required For Oauth login and Google login using BuiltUILoginController) -->
    <uses-permission android:name="android.permission.USE_CREDENTIALS" />

    <!-- Allows an app to access precise location from location sources. (Required For location) -->
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

    <!-- Allows an app to access approximate location derived from network location sources. (Required For location) -->
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />

    <!-- Allow the application to access Google web-based services -->
    <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES" />


    <uses-library android:name="com.google.android.maps" />

    <uses-feature
        android:glEsVersion="0x00020000"
        android:required="true"/>

    <permission
        android:name="com.example.permission.MAPS_RECEIVE"
        android:protectionLevel="signature"/>
    <uses-permission android:name="com.example.permission.MAPS_RECEIVE"/>



    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.AppCompat.Light">

        <!--
      The API key for Google Maps-based APIs is defined as a string resource.
      (See the file "res/values/google_maps_api.xml").
      Note that the API key is linked to the encryption key used to sign the APK.
      You need a different API key for each encryption key, including the release key that is used to
      sign the APK for publishing.
      You can define the keys for the debug and release targets in src/debug/ and src/release/.
 -->
        <meta-data
            android:name="com.google.android.geo.API_KEY"
            android:value="@string/google_maps_key" />


        <activity
            android:name=".MainActivity"
            android:label="@string/app_name"
            android:theme="@style/Theme.AppCompat.Light">
            <!--
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />

                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
             -->
        </activity>

        <activity android:name=".LoginActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <activity android:name="com.cmpe277.mobileninjas.eventshare.Albums.AlbumsActivity"></activity>

        <activity android:name="com.cmpe277.mobileninjas.eventshare.Images.ImageGridActivity"
            android:label="@string/app_name">
        </activity>

        <activity
            android:name="com.cmpe277.mobileninjas.eventshare.Images.ImageDetailActivity"
            android:label="@string/app_name"
            android:parentActivityName="com.cmpe277.mobileninjas.eventshare.Images.ImageGridActivity"
            android:theme="@style/AppThemeDark.FullScreen" >
            <meta-data android:name="android.support.PARENT_ACTIVITY"
                android:value="com.cmpe277.mobileninjas.eventshare.Images.ImageGridActivity" />
        </activity>


        <!-- To check network availability. Called every time when network connection state changes -->
        <receiver
            android:name="com.raweng.built.ConnectionStatus"
            android:enabled="true" >
            <intent-filter>
                <action android:name="android.net.conn.CONNECTIVITY_CHANGE" >
                </action>
            </intent-filter>
        </receiver>
        <!-- To delete expired cache from built cache folder -->
        <receiver
            android:name="com.raweng.built.BuiltClearCache"
            android:enabled="true" >
            <intent-filter>
                <action android:name="StartClearingCache" >
                </action>
            </intent-filter>
        </receiver>
        <!-- add for new upgradation of google play services if required -->
        <meta-data
            android:name="com.google.android.gms.version"
            android:value="@integer/google_play_services_version" />
        <activity
            android:name="com.raweng.built.userInterface.UIAndroidExplorerScreen"
            android:label="@string/app_name" >
        </activity>

        <service android:name=".Images.Upload.ImageUploadService"/>
        <receiver android:name=".Images.Upload.ServiceAlarmSetter"></receiver>
        <receiver android:name=".Images.Upload.DeviceBootReceiver" android:enabled="false">
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED"></action>
            </intent-filter>
        </receiver>

        <service android:name=".MyService" android:enabled="true"/>

    </application>

</manifest>
